na_value <- sapply(smokedf, function(x) sum(is.na(x)))
predictors_with_missing <- names(na_value[na_value > 0])
missing_values_table <- data.frame(Predictor = predictors_with_missing,
Missing_Values = na_value[predictors_with_missing])
missing_values_table |> head() |> gt() |>
tab_header(title = "Predictors with Missing Values")
vis_miss(smokedf)
# Histogram of each predictors
smokedf |>
pivot_longer(-Fire.Alarm, names_to = 'Element', values_to = 'value') |>
ggplot(aes(x = value)) +
geom_histogram(bins = 20) +
facet_wrap(~Element, scales = 'free', ncol = 4) +
theme(axis.text.x = element_text(angle = 10)) +
labs(title = 'Predictors Distribution', x = NULL, y = "Count")
# Histogram of each predictors
smokedf |>
pivot_longer(-Fire.Alarm, names_to = 'Element', values_to = 'value') |>
ggplot(aes(x = value)) +
geom_histogram(bins = 20) +
facet_wrap(~Element, scales = 'free', ncol = 4) +
theme(axis.text.x = element_text(angle = "free")) +
labs(title = 'Predictors Distribution', x = NULL, y = "Count")
# Histogram of each predictors
smokedf |>
pivot_longer(-Fire.Alarm, names_to = 'Element', values_to = 'value') |>
ggplot(aes(x = value)) +
geom_histogram(bins = 20) +
facet_wrap(~Element, scales = 'free', ncol = 4) +
theme(axis.text.x = element_text(angle = 0)) +
labs(title = 'Predictors Distribution', x = NULL, y = "Count")
# Create box plots for each predictors:
smokedf |>
pivot_longer(-Fire.Alarm, names_to = 'Element', values_to = 'value') |>
ggplot(aes(value)) +
geom_boxplot() +
facet_wrap(~Element, scales = "free", ncol = 4) +
theme(axis.text.x = element_text(angle = 0)) +
labs(title = 'Box Plots of Predictors', x = "Count")
# Create box plots of response for each predictors:
smokedf |>
pivot_longer(-Fire.Alarm, names_to = 'Element', values_to = 'value') |>
ggplot(aes(Fire.Alarm, value, group = Fire.Alarm)) +
geom_boxplot() +
facet_wrap(~Element, scales = "free", ncol = 4) +
theme(axis.text.x = element_text(angle = 0)) +
labs(title = 'Box Plots of Predictors over Response', x = "Fire Alarm", y = "Count")
# Convert UTC format into hours of day and day of week
smokedf$UTC_datetime <- as.POSIXct(smokedf$UTC, origin = "1970-01-01", tz = "UTC")
# all from 2022 and June
smokedf$hour <- hour(smokedf$UTC_datetime)
smokedf$day <- wday(smokedf$UTC_datetime, week_start = 1)
# Reorder variables and remove UTC_datetime
other_columns <- setdiff(names(smokedf), "Fire.Alarm")
smokedf <- smokedf[, c(other_columns, "Fire.Alarm")]
smokedf <- subset(smokedf, select = c(-UTC_datetime, -UTC))
# Correlation plot including outcome variable
smokedf |>
mutate(Fire.Alarm = as.numeric(Fire.Alarm)) |>
cor() |>
corrplot.mixed(title = "Correlation Plot Between Outcome and Predictors",
tl.cex = .4, number.cex = 0.6, mar = c(1, 1, 1, 1))
# Remove highly correlated predictors
correlation_matrix <- cor(smokedf[, -1])
highly_correlated <- findCorrelation(correlation_matrix, cutoff = 0.75)
highly_correlated_names <- colnames(smokedf[, -1])[highly_correlated]
smokedf_reduced <- smokedf[, -highly_correlated]
# Correlation plot including outcome variable
smokedf_reduced |>
mutate(Fire.Alarm = as.numeric(Fire.Alarm)) |>
cor() |>
corrplot.mixed(title = "Reduced Correlation Plot",
tl.cex = .5, number.cex = 0.8, mar = c(1, 1, 1, 1))
# Calculate skewness of each predictors
# Skew values less than ±0.5 should be considered ‘normal enough’
skew_fa <- smokedf_reduced |>
dplyr::select(-Fire.Alarm) |>
map_dbl(skewness) |> round(3)
skew_fa_tibble <- tibble(Variable = names(skew_fa), Skewness = skew_fa)
skew_fa_tibble |> gt()
# Determine zero values in the dataframe
zero_counts <- sapply(smokedf, function(x) sum(x == 0, na.rm = TRUE))
# Perform Box Cox Tranformation Analysis and determine predictors with >50% improvement
bct_test <- function(x, property = 'skew') {
stopifnot(property %in% c('skew', 'lambda'))
x <- x[which(! is.na(x))]
x2 <- x + ifelse(any(x == 0), 0.0001, 0)
bct <- BoxCoxTrans(x2)
x_trans <- predict(bct, x2 )
if (property == 'skew') return(e1071::skewness(x_trans))
return(bct$lambda)}
skew_smfa_bct <- smokedf_reduced |>
dplyr::select(-Fire.Alarm) |>
map_dbl(bct_test)
bct_analysis <- tibble(
Property = names(skew_fa),
`Original Skew` = skew_fa,
`Skew after BoxCox`= round(skew_smfa_bct,4),
Lambda = smokedf_reduced |> dplyr::select(-Fire.Alarm) |>
map_dbl( ~ bct_test(.x, 'lambda')))
bct_keep <- bct_analysis |>
filter(abs(`Original Skew`) > 0.5,
abs(`Skew after BoxCox`) < 0.5)
bct_keep |>
gt::gt()
# Apply BCT Analysis result in reduced dataframe
bct <- BoxCoxTrans(smokedf_reduced$CNT +
ifelse(any(smokedf_reduced$CNT == 0), 0.0001, 0))
smokedf_reduced$gamma_CNT <- predict(bct, smokedf_reduced$CNT)
# Plot Changes
smokedf_reduced |> ggplot(aes(x = gamma_CNT)) +
geom_histogram(binwidth = 500, fill = "pink", color = "white") +
geom_histogram(aes(x = CNT), binwidth = 500, fill = "darkgray", alpha = 10) +
labs(title = "Histogram of Box-Cox Transformed gamma with 0")
smokedf_reduced |>
ggplot(aes(x = gamma_CNT)) +
geom_histogram(bins= 9, color = "white", fill = "pink") +
labs(title ="Histogram of Box-Cox Transformed gamma_CNT")
# Remove Original CNT in reduced dataframe
smokedf_reduced <- smokedf_reduced |> dplyr::select(-CNT) |>
relocate("Fire.Alarm", .after = last_col())
# General relationship plot: Multivariate Analysis (Original Data)
smokedf |>
dplyr::select(-Fire.Alarm) |>
ggpairs(title = 'Original: Predictors Relationship Map', progress = TRUE,
upper = list(continuous = wrap("cor", size = 2))) +
theme_grey(base_size = 5) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 5),
axis.text.y = element_text(size = 5),
panel.spacing = unit(0.01, "lines"))
set.seed(503)
smokedf_reduced$Fire.Alarm <- ifelse(smokedf_reduced$Fire.Alarm == 0, "No", "Yes")
smokedf_predictors <- smokedf_reduced[ ,-1]
smokedf_yield <- smokedf_reduced[ ,1]
# Split the data into training and test sets
smokedf_index <- createDataPartition(smokedf_yield, p = 0.8, list = FALSE)
smokedf_train <- smokedf_predictors[smokedf_index, ]
smokedf_test <- smokedf_predictors[-smokedf_index, ]
# Center and scaling using preProcess
smokedf_prep <- preProcess(smokedf_train, method = c("center", "scale"))
# Apply the transformation to the training data
smokedf_train_transformed <- predict(smokedf_prep, smokedf_train)
smokedf_test_transformed <- predict(smokedf_prep, smokedf_test)
# Rebalance train dataset
cat("Number of non-triggered fire alarm (No) = ",
sum(smokedf_train_transformed$Fire.Alarm == "No"), "\n")
cat("Number of triggered fire alarm (Yes) =",
sum(smokedf_train_transformed$Fire.Alarm == "Yes"))
train_balanced <- ROSE(Fire.Alarm ~ ., data = smokedf_train_transformed)$data
rebalanced <- as.data.frame(table(train_balanced$Fire.Alarm))
rebalanced |> gt() |>
tab_header(title = "Rebalanced Fire Alarm Counts")
View(train_balanced)
train_bal <- subset(train_balanced, select = c(-hour, -day))
View(smokedf_test_transformed)
# List of libraries
library(caret)
library(tidyverse)
library(naniar)
library(gt)
library(ggplot2)
library(dplyr)
library(tidyr)
library(GGally)
library(corrplot)
library(e1071)
library(tibble)
library(MASS)
library(mice)
library(reshape2)
library(ROSE)
library(pROC)
library(lubridate)
# Upload datasets
train <- read.csv("train_dataset.csv")
test <- read.csv("test_dataset.csv")
# Use train_dataset moving forward
smokedf <- train
str(smokedf)
class(smokedf)
#summary(smokedf)
# Convert UTC format into hours of day and day of week
smokedf$UTC_datetime <- as.POSIXct(smokedf$UTC, origin = "1970-01-01", tz = "UTC")
# all from 2022 and June
smokedf$hour <- hour(smokedf$UTC_datetime)
smokedf$day <- wday(smokedf$UTC_datetime, week_start = 1)
# Reorder variables and remove UTC_datetime
other_columns <- setdiff(names(smokedf), "Fire.Alarm")
smokedf <- smokedf[, c(other_columns, "Fire.Alarm")]
smokedf <- subset(smokedf, select = c(-UTC_datetime, -UTC))
# Correlation plot including outcome variable
smokedf |>
mutate(Fire.Alarm = as.numeric(Fire.Alarm)) |>
cor() |>
corrplot.mixed(title = "Correlation Plot Between Outcome and Predictors",
tl.cex = .4, number.cex = 0.6, mar = c(1, 1, 1, 1))
# Remove highly correlated predictors
correlation_matrix <- cor(smokedf[, -1])
highly_correlated <- findCorrelation(correlation_matrix, cutoff = 0.75)
highly_correlated_names <- colnames(smokedf[, -1])[highly_correlated]
smokedf_reduced <- smokedf[, -highly_correlated]
# Correlation plot including outcome variable
smokedf_reduced |>
mutate(Fire.Alarm = as.numeric(Fire.Alarm)) |>
cor() |>
corrplot.mixed(title = "Reduced Correlation Plot",
tl.cex = .5, number.cex = 0.8, mar = c(1, 1, 1, 1))
# Calculate skewness of each predictors
# Skew values less than ±0.5 should be considered ‘normal enough’
skew_fa <- smokedf_reduced |>
dplyr::select(-Fire.Alarm) |>
map_dbl(skewness) |> round(3)
skew_fa_tibble <- tibble(Variable = names(skew_fa), Skewness = skew_fa)
skew_fa_tibble |> gt()
# Determine zero values in the dataframe
zero_counts <- sapply(smokedf, function(x) sum(x == 0, na.rm = TRUE))
# Perform Box Cox Tranformation Analysis and determine predictors with >50% improvement
bct_test <- function(x, property = 'skew') {
stopifnot(property %in% c('skew', 'lambda'))
x <- x[which(! is.na(x))]
x2 <- x + ifelse(any(x == 0), 0.0001, 0)
bct <- BoxCoxTrans(x2)
x_trans <- predict(bct, x2 )
if (property == 'skew') return(e1071::skewness(x_trans))
return(bct$lambda)}
skew_smfa_bct <- smokedf_reduced |>
dplyr::select(-Fire.Alarm) |>
map_dbl(bct_test)
bct_analysis <- tibble(
Property = names(skew_fa),
`Original Skew` = skew_fa,
`Skew after BoxCox`= round(skew_smfa_bct,4),
Lambda = smokedf_reduced |> dplyr::select(-Fire.Alarm) |>
map_dbl( ~ bct_test(.x, 'lambda')))
bct_keep <- bct_analysis |>
filter(abs(`Original Skew`) > 0.5,
abs(`Skew after BoxCox`) < 0.5)
bct_keep |>
gt::gt()
# Apply BCT Analysis result in reduced dataframe
bct <- BoxCoxTrans(smokedf_reduced$CNT +
ifelse(any(smokedf_reduced$CNT == 0), 0.0001, 0))
smokedf_reduced$gamma_CNT <- predict(bct, smokedf_reduced$CNT)
# Plot Changes
smokedf_reduced |> ggplot(aes(x = gamma_CNT)) +
geom_histogram(binwidth = 500, fill = "pink", color = "white") +
geom_histogram(aes(x = CNT), binwidth = 500, fill = "darkgray", alpha = 10) +
labs(title = "Histogram of Box-Cox Transformed gamma with 0")
smokedf_reduced |>
ggplot(aes(x = gamma_CNT)) +
geom_histogram(bins= 9, color = "white", fill = "pink") +
labs(title ="Histogram of Box-Cox Transformed gamma_CNT")
# Remove Original CNT in reduced dataframe
smokedf_reduced <- smokedf_reduced |> dplyr::select(-CNT) |>
relocate("Fire.Alarm", .after = last_col())
# List of libraries
library(caret)
library(tidyverse)
library(naniar)
library(gt)
library(ggplot2)
library(dplyr)
library(tidyr)
library(GGally)
library(corrplot)
library(e1071)
library(tibble)
library(MASS)
library(mice)
library(reshape2)
library(ROSE)
library(pROC)
library(lubridate)
# Upload datasets
train <- read.csv("train_dataset.csv")
test <- read.csv("test_dataset.csv")
# Use train_dataset moving forward
smokedf <- train
str(smokedf)
class(smokedf)
#summary(smokedf)
# Convert UTC format into hours of day and day of week
smokedf$UTC_datetime <- as.POSIXct(smokedf$UTC, origin = "1970-01-01", tz = "UTC")
# all from 2022 and June
smokedf$hour <- hour(smokedf$UTC_datetime)
smokedf$day <- wday(smokedf$UTC_datetime, week_start = 1)
# Reorder variables and remove UTC_datetime
other_columns <- setdiff(names(smokedf), "Fire.Alarm")
smokedf <- smokedf[, c(other_columns, "Fire.Alarm")]
smokedf <- subset(smokedf, select = c(-UTC_datetime, -UTC))
View(smokedf)
# Convert UTC format into hours of day and day of week
smokedf$UTC_datetime <- as.POSIXct(smokedf$UTC, origin = "1970-01-01", tz = "UTC")
# Correlation plot including outcome variable
smokedf |>
mutate(Fire.Alarm = as.numeric(Fire.Alarm)) |>
cor() |>
corrplot.mixed(title = "Correlation Plot Between Outcome and Predictors",
tl.cex = .4, number.cex = 0.6, mar = c(1, 1, 1, 1))
# Remove highly correlated predictors
correlation_matrix <- cor(smokedf[, -1])
highly_correlated <- findCorrelation(correlation_matrix, cutoff = 0.75)
highly_correlated_names <- colnames(smokedf[, -1])[highly_correlated]
smokedf_reduced <- smokedf[, -highly_correlated]
# Correlation plot including outcome variable
smokedf_reduced |>
mutate(Fire.Alarm = as.numeric(Fire.Alarm)) |>
cor() |>
corrplot.mixed(title = "Reduced Correlation Plot",
tl.cex = .5, number.cex = 0.8, mar = c(1, 1, 1, 1))
# Remove unnecessary predictors
smokedf_red <- subset(train_balanced, select = c(-hour, -day, -CNT))
# List of libraries
library(caret)
library(tidyverse)
library(naniar)
library(gt)
library(ggplot2)
library(dplyr)
library(tidyr)
library(GGally)
library(corrplot)
library(e1071)
library(tibble)
library(MASS)
library(mice)
library(reshape2)
library(ROSE)
library(pROC)
library(lubridate)
# Upload datasets
train <- read.csv("train_dataset.csv")
test <- read.csv("test_dataset.csv")
# Use train_dataset moving forward
smokedf <- train
str(smokedf)
class(smokedf)
#summary(smokedf)
# Convert UTC format into hours of day and day of week
smokedf$UTC_datetime <- as.POSIXct(smokedf$UTC, origin = "1970-01-01", tz = "UTC")
# all from 2022 and June
smokedf$hour <- hour(smokedf$UTC_datetime)
smokedf$day <- wday(smokedf$UTC_datetime, week_start = 1)
# Reorder variables and remove UTC_datetime
other_columns <- setdiff(names(smokedf), "Fire.Alarm")
smokedf <- smokedf[, c(other_columns, "Fire.Alarm")]
smokedf <- subset(smokedf, select = c(-UTC_datetime, -UTC))
# Correlation plot including outcome variable
smokedf |>
mutate(Fire.Alarm = as.numeric(Fire.Alarm)) |>
cor() |>
corrplot.mixed(title = "Correlation Plot Between Outcome and Predictors",
tl.cex = .4, number.cex = 0.6, mar = c(1, 1, 1, 1))
# Remove unnecessary predictors
smokedf_red <- subset(train_balanced, select = c(-hour, -day, -CNT))
# Remove unnecessary predictors
smokedf_red <- subset(smodedf, select = c(-hour, -day, -CNT))
# Remove unnecessary predictors
smokedf_red <- subset(smokedf, select = c(-hour, -day, -CNT))
# Remove highly correlated predictors
correlation_matrix <- cor(smokedf_red[, -1])
highly_correlated <- findCorrelation(correlation_matrix, cutoff = 0.75)
highly_correlated_names <- colnames(smokedf_red[, -1])[highly_correlated]
smokedf_reduced <- smokedf[, -highly_correlated]
# Correlation plot including outcome variable
smokedf_reduced |>
mutate(Fire.Alarm = as.numeric(Fire.Alarm)) |>
cor() |>
corrplot.mixed(title = "Reduced Correlation Plot",
tl.cex = .5, number.cex = 0.8, mar = c(1, 1, 1, 1))
View(smokedf_red)
View(smokedf_red)
# Remove highly correlated predictors
correlation_matrix <- cor(smokedf_red[, -1])
highly_correlated <- findCorrelation(correlation_matrix, cutoff = 0.75)
highly_correlated_names <- colnames(smokedf_red[, -1])[highly_correlated]
smokedf_reduced <- smokedf_red[, -highly_correlated]
# Correlation plot including outcome variable
smokedf_reduced |>
mutate(Fire.Alarm = as.numeric(Fire.Alarm)) |>
cor() |>
corrplot.mixed(title = "Reduced Correlation Plot",
tl.cex = .5, number.cex = 0.8, mar = c(1, 1, 1, 1))
# Remove highly correlated predictors
correlation_matrix <- cor(smokedf_red[, -1])
highly_correlated <- findCorrelation(correlation_matrix, cutoff = 0.70)
highly_correlated_names <- colnames(smokedf_red[, -1])[highly_correlated]
smokedf_reduced <- smokedf_red[, -highly_correlated]
# Correlation plot including outcome variable
smokedf_reduced |>
mutate(Fire.Alarm = as.numeric(Fire.Alarm)) |>
cor() |>
corrplot.mixed(title = "Reduced Correlation Plot",
tl.cex = .5, number.cex = 0.8, mar = c(1, 1, 1, 1))
# Remove highly correlated predictors
correlation_matrix <- cor(smokedf_red[, -1])
highly_correlated <- findCorrelation(correlation_matrix, cutoff = 0.75)
highly_correlated_names <- colnames(smokedf_red[, -1])[highly_correlated]
smokedf_reduced <- smokedf_red[, -highly_correlated]
# Correlation plot including outcome variable
smokedf_reduced |>
mutate(Fire.Alarm = as.numeric(Fire.Alarm)) |>
cor() |>
corrplot.mixed(title = "Reduced Correlation Plot",
tl.cex = .5, number.cex = 0.8, mar = c(1, 1, 1, 1))
# Calculate skewness of each predictors
# Skew values less than ±0.5 should be considered ‘normal enough’
skew_fa <- smokedf_reduced |>
dplyr::select(-Fire.Alarm) |>
map_dbl(skewness) |> round(3)
skew_fa_tibble <- tibble(Variable = names(skew_fa), Skewness = skew_fa)
skew_fa_tibble |> gt()
# Determine zero values in the dataframe
zero_counts <- sapply(smokedf, function(x) sum(x == 0, na.rm = TRUE))
# Calculate skewness of each predictors
# Skew values less than ±0.5 should be considered ‘normal enough’
skew_fa <- smokedf_reduced |>
dplyr::select(-Fire.Alarm) |>
map_dbl(skewness) |> round(3)
skew_fa_tibble <- tibble(Variable = names(skew_fa), Skewness = skew_fa)
skew_fa_tibble |> gt()
# Determine zero values in the dataframe
zero_counts <- sapply(smokedf, function(x) sum(x == 0, na.rm = TRUE))
# Upload datasets
train <- read.csv("train_dataset.csv")
test <- read.csv("test_dataset.csv")
# Use train_dataset moving forward
smokedf <- train
str(smokedf)
class(smokedf)
#summary(smokedf)
# Convert UTC format into hours of day and day of week
smokedf$UTC_datetime <- as.POSIXct(smokedf$UTC, origin = "1970-01-01", tz = "UTC")
# all from 2022 and June
smokedf$hour <- hour(smokedf$UTC_datetime)
smokedf$day <- wday(smokedf$UTC_datetime, week_start = 1)
# Reorder variables and remove UTC_datetime
other_columns <- setdiff(names(smokedf), "Fire.Alarm")
smokedf <- smokedf[, c(other_columns, "Fire.Alarm")]
smokedf <- subset(smokedf, select = c(-UTC_datetime, -UTC))
View(smokedf)
# Correlation plot including outcome variable
smokedf |>
mutate(Fire.Alarm = as.numeric(Fire.Alarm)) |>
cor() |>
corrplot.mixed(title = "Correlation Plot Between Outcome and Predictors",
tl.cex = .4, number.cex = 0.6, mar = c(1, 1, 1, 1))
# Remove unnecessary predictors
smokedf_red <- subset(smokedf, select = c(-hour, -day, -CNT))
# Remove highly correlated predictors
correlation_matrix <- cor(smokedf_red[, -1])
highly_correlated <- findCorrelation(correlation_matrix, cutoff = 0.75)
highly_correlated_names <- colnames(smokedf_red[, -1])[highly_correlated]
smokedf_reduced <- smokedf_red[, -highly_correlated]
# Correlation plot including outcome variable
smokedf_reduced |>
mutate(Fire.Alarm = as.numeric(Fire.Alarm)) |>
cor() |>
corrplot.mixed(title = "Reduced Correlation Plot",
tl.cex = .5, number.cex = 0.8, mar = c(1, 1, 1, 1))
# Calculate skewness of each predictors
# Skew values less than ±0.5 should be considered ‘normal enough’
skew_fa <- smokedf_reduced |>
dplyr::select(-Fire.Alarm) |>
map_dbl(skewness) |> round(3)
skew_fa_tibble <- tibble(Variable = names(skew_fa), Skewness = skew_fa)
skew_fa_tibble |> gt()
# Determine zero values in the dataframe
zero_counts <- sapply(smokedf, function(x) sum(x == 0, na.rm = TRUE))
# Perform Box Cox Tranformation Analysis and determine predictors with >50% improvement
bct_test <- function(x, property = 'skew') {
stopifnot(property %in% c('skew', 'lambda'))
x <- x[which(! is.na(x))]
x2 <- x + ifelse(any(x == 0), 0.0001, 0)
bct <- BoxCoxTrans(x2)
x_trans <- predict(bct, x2 )
if (property == 'skew') return(e1071::skewness(x_trans))
return(bct$lambda)}
skew_smfa_bct <- smokedf_reduced |>
dplyr::select(-Fire.Alarm) |>
map_dbl(bct_test)
bct_analysis <- tibble(
Property = names(skew_fa),
`Original Skew` = skew_fa,
`Skew after BoxCox`= round(skew_smfa_bct,4),
Lambda = smokedf_reduced |> dplyr::select(-Fire.Alarm) |>
map_dbl( ~ bct_test(.x, 'lambda')))
bct_keep <- bct_analysis |>
filter(abs(`Original Skew`) > 0.5,
abs(`Skew after BoxCox`) < 0.5)
bct_keep |>
gt::gt()
# Apply BCT Analysis result in reduced dataframe
bct <- BoxCoxTrans(smokedf_reduced$CNT +
ifelse(any(smokedf_reduced$CNT == 0), 0.0001, 0))
smokedf_reduced$gamma_CNT <- predict(bct, smokedf_reduced$CNT)
# Calculate skewness of each predictors
# Skew values less than ±0.5 should be considered ‘normal enough’
skew_fa <- smokedf_reduced |>
dplyr::select(-Fire.Alarm) |>
map_dbl(skewness) |> round(3)
skew_fa_tibble <- tibble(Variable = names(skew_fa), Skewness = skew_fa)
skew_fa_tibble |> gt()
# Determine zero values in the dataframe
zero_counts <- sapply(smokedf, function(x) sum(x == 0, na.rm = TRUE))
# Calculate skewness of each predictors
# Skew values less than ±0.5 should be considered ‘normal enough’
skew_fa <- smokedf_reduced |>
dplyr::select(-Fire.Alarm) |>
map_dbl(skewness) |> round(3)
skew_fa_tibble <- tibble(Variable = names(skew_fa), Skewness = skew_fa)
skew_fa_tibble |> gt()
